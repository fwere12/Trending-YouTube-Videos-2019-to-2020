#Importing the necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

##Reading in the dataset
df = pd.read_csv("C:\\Users\\Administrator\\Documents\\GitHub\\Trending-YouTube-Videos-2019-to-2020\\Trending Youtube Videos 2019 to 2020.csv")
print (df.head(5))

#Data types
print(df.dtypes)

#Viewing all the columns in our dataset
print(df.columns)

#Summary Statistics
print(df.describe().T)

#Checking for missing values in the dataset
print(df.isnull().sum())
#Checking for duplicates
print(df.duplicated().sum())

#Plotting distributions
fig, axs = plt.subplots(2, 2, figsize=(15, 10))
sns.histplot(df['views'], bins=50, ax=axs[0, 0], color='red').set_title('Distribution of Views')
sns.histplot(df['likes'], bins=50, ax=axs[0, 1], color='red').set_title('Distribution of Likes')
sns.histplot(df['comments'], bins=50, ax=axs[1, 0], color='red').set_title('Distribution of Comments')
sns.histplot(df['dislikes'], bins=50, ax=axs[1, 1], color='red').set_title('Distribution of Dislikes')
plt.tight_layout()
plt.show()

#Lineplots
df['timestamp'] = pd.to_datetime(df['timestamp'])

# Extract the date from the timestamp
df['date'] = df['timestamp'].dt.date

# Group by date and calculate daily sums
daily_stats = df.groupby('date').agg({'views': 'sum', 'likes': 'sum', 'comments': 'sum', 'dislikes': 'sum'}).reset_index()

# Plot the daily stats
fig, axs = plt.subplots(4, 1, figsize=(15, 20))
sns.lineplot(data=daily_stats, x='date', y='views', ax=axs[0], color='red').set_title('Views Over Time')
sns.lineplot(data=daily_stats, x='date', y='likes', ax=axs[1], color='red').set_title('Likes Over Time')
sns.lineplot(data=daily_stats, x='date', y='comments', ax=axs[2], color='red').set_title('Comments Over Time')
sns.lineplot(data=daily_stats, x='date', y='dislikes', ax=axs[3], color='red').set_title('Dislikes Over Time')

plt.tight_layout()
plt.show()

#Correlation
correlation_matrix = df[['views', 'likes', 'comments', 'dislikes']].corr()
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='Reds')
plt.title('Correlation Matrix')
plt.show()

#Top videos
top_videos_views = df.nlargest(10, 'views')[['ytvideoid', 'views', 'likes', 'comments', 'dislikes']]
print(top_videos_views)

top_videos_likes = df.nlargest(10, 'likes')[['ytvideoid', 'views', 'likes', 'comments', 'dislikes']]
print(top_videos_likes)

# Scatter plot of dislikes vs. likes
plt.figure(figsize=(10, 6))
sns.scatterplot(x='likes', y='dislikes', data=df, color='orange')
plt.title('Dislikes vs Likes')
plt.xlabel('Likes')
plt.ylabel('Dislikes')
plt.show()



